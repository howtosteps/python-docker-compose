{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About this site This is a simple tutorial that describes how to build a container using docker-compose Contents Pre-requisites Step 1 Step-2 Step-3 Pre-requisites Step 1 Start here ... mkdir Step 2 Step 3","title":"About"},{"location":"about/#about-this-site","text":"This is a simple tutorial that describes how to build a container using docker-compose","title":"About this site"},{"location":"about/#contents","text":"Pre-requisites Step 1 Step-2 Step-3","title":"Contents"},{"location":"about/#pre-requisites","text":"","title":"Pre-requisites"},{"location":"about/#step-1","text":"Start here ... mkdir","title":"Step 1"},{"location":"about/#step-2","text":"","title":"Step 2"},{"location":"about/#step-3","text":"","title":"Step 3"},{"location":"build-your-app/","text":"Build your App using docker-compose From your project directory, start up your application by running docker-compose up C:\\Users\\aniru\\workspace\\docker\\python-docker-compose> docker-compose up Compose pulls a Redis image, builds an image for your code, and starts the services you defined. In this case, the code is statically copied into the image at build time.","title":"Build your app"},{"location":"build-your-app/#build-your-app-using-docker-compose","text":"From your project directory, start up your application by running docker-compose up C:\\Users\\aniru\\workspace\\docker\\python-docker-compose> docker-compose up Compose pulls a Redis image, builds an image for your code, and starts the services you defined. In this case, the code is statically copied into the image at build time.","title":"Build your App using docker-compose"},{"location":"create-dockerfile/","text":"Create a DockerFile We will now create a DockerFile that builds a Docker image. The image contains all the dependencies the Python application requires, including Python itself. In the project directory, create a file named DockerFile FROM python:3.7-alpine WORKDIR /code ENV FLASK_APP app.py ENV FLASK_RUN_HOST 0.0.0.0 COPY requirements.txt requirements.txt RUN pip install -r requirements.txt COPY . . CMD [\"flask\",\"run\"] This tells Docker to: Build an image starting with the Python 3.7 image. Set the working directory to /code. Set environment variables used by the flask command. Copy requirements.txt and install the Python dependencies. Copy the current directory . in the project to the workdir . in the image. Set the default command for the container to flask run.","title":"Create Dockerfile"},{"location":"create-dockerfile/#create-a-dockerfile","text":"We will now create a DockerFile that builds a Docker image. The image contains all the dependencies the Python application requires, including Python itself. In the project directory, create a file named DockerFile FROM python:3.7-alpine WORKDIR /code ENV FLASK_APP app.py ENV FLASK_RUN_HOST 0.0.0.0 COPY requirements.txt requirements.txt RUN pip install -r requirements.txt COPY . . CMD [\"flask\",\"run\"] This tells Docker to: Build an image starting with the Python 3.7 image. Set the working directory to /code. Set environment variables used by the flask command. Copy requirements.txt and install the Python dependencies. Copy the current directory . in the project to the workdir . in the image. Set the default command for the container to flask run.","title":"Create a DockerFile"},{"location":"docker-compose/","text":"Define services a in Docker Compose File Create a file called docker-compose.yml in your project directory and paste the following: FROM python:3.7-alpine WORKDIR /code ENV FLASK_APP app.py ENV FLASK_RUN_HOST 0.0.0.0 # RUN apk add --no-cache gcc musl-dev linux headers COPY requirements.txt requirements.txt RUN pip install -r requirements.txt COPY . . CMD [\"flask\",\"run\"] This Compose file defines two services: web and redis Web service The web service uses an image that\u2019s built from the Dockerfile in the current directory. It then binds the container and the host machine to the exposed port, 5000. This example service uses the default port for the Flask web server, 5000. Redis service The redis service uses a public Redis image pulled from the Docker Hub registry.","title":"Define Docker-Compose"},{"location":"docker-compose/#define-services-a-in-docker-compose-file","text":"Create a file called docker-compose.yml in your project directory and paste the following: FROM python:3.7-alpine WORKDIR /code ENV FLASK_APP app.py ENV FLASK_RUN_HOST 0.0.0.0 # RUN apk add --no-cache gcc musl-dev linux headers COPY requirements.txt requirements.txt RUN pip install -r requirements.txt COPY . . CMD [\"flask\",\"run\"] This Compose file defines two services: web and redis","title":"Define services a in Docker Compose File"},{"location":"docker-compose/#web-service","text":"The web service uses an image that\u2019s built from the Dockerfile in the current directory. It then binds the container and the host machine to the exposed port, 5000. This example service uses the default port for the Flask web server, 5000.","title":"Web service"},{"location":"docker-compose/#redis-service","text":"The redis service uses a public Redis image pulled from the Docker Hub registry.","title":"Redis service"},{"location":"run-your-app/","text":"Run your app in your browser Enter http://localhost:5000/ on your browser. You should see test 1..2.3 good chat woth sandeep and murali","title":"Run the app"},{"location":"run-your-app/#run-your-app-in-your-browser","text":"Enter http://localhost:5000/ on your browser. You should see test 1..2.3 good chat woth sandeep and murali","title":"Run your app in your browser"},{"location":"setup/","text":"Initial Setup 1. Create a directory All software assets will be created in this directory C:\\Users\\aniru\\workspace\\docker> mkdir python-docker-compose 2. Create application files 2.1 Create app.py file app.py is the main python file. redis is the hostname of the redis container. import time import redis from flask import Flask app = Flask(__name__) cache = redis.Redis(host='redis', port=6379) def get_hit_count(): retries = 5 while True: try: return cache.incr('hits') except redis.exceptions.ConnectionError as exc: if retries == 0: raise exc retries -= 1 time.sleep(0.5) @app.route('/') def hello(): count = get_hit_count() return 'Hello hee haw ....again counter:{}\\n'.format(count) 2.2 Create requirements.txt","title":"Setup"},{"location":"setup/#initial-setup","text":"","title":"Initial Setup"},{"location":"setup/#1-create-a-directory","text":"All software assets will be created in this directory C:\\Users\\aniru\\workspace\\docker> mkdir python-docker-compose","title":"1. Create a directory"},{"location":"setup/#2-create-application-files","text":"","title":"2. Create application files"},{"location":"setup/#21-create-apppy-file","text":"app.py is the main python file. redis is the hostname of the redis container. import time import redis from flask import Flask app = Flask(__name__) cache = redis.Redis(host='redis', port=6379) def get_hit_count(): retries = 5 while True: try: return cache.incr('hits') except redis.exceptions.ConnectionError as exc: if retries == 0: raise exc retries -= 1 time.sleep(0.5) @app.route('/') def hello(): count = get_hit_count() return 'Hello hee haw ....again counter:{}\\n'.format(count)","title":"2.1 Create app.py file"},{"location":"setup/#22-create-requirementstxt","text":"","title":"2.2 Create requirements.txt"}]}